21. ¿Cuáles son las diferencias entre la ejecución del programa "Hola Mundo" con el intérprete
de Ruby (ruby helloWorld.rb) y el intérprete interactivo del ejercicio anterior?

Con el intérprete de Ruby se muestra: 

"Hola mundo" 

mientras que el intérprete interactivo muestra: 

2.1.1 :001 > puts "Hola Mundo"2.1.1 :001 > 
Hola Mundo
 => nil 
2.1.1 :001 > 

27. ¿Cuáles son las diferencias entre la ejecución del programa "Hola Mundo" con el intérprete
interactivo y con pry?

Con el intérprete interactivo:

2.1.1 :001 > puts "Hola Mundo"2.1.1 :001 > 
Hola Mundo
 => nil 
2.1.1 :001 > 

Con pry:

Hola Mundo

34.¿Qué diferencia hay entre "\t\n" y ’\t\n’?

Las comillas simples toman la cadena literalmente y las comillas dobles tienen en cuenta los caracteres escapados, es decir: 
puts "Hola \t\n" mostraría la cadena: Hola 
puts 'Hola \t\n' mostraría la cadena tal cual la hemos escrito: Hola \t\n 

35. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?

-Funciona como las comillas simples. 
-"hello world\\n" 
-"'a' 'b' 'c'"

36. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?

-Funciona como las commillas dobles.
-"hello world\n"
-"\"a\" \"b\" \"c\"" (escapa las comillas)

37. ¿Qué queda en c?

"--4--\n--2--\n" (Se ha sustituido la a y la b por los valores que le hemos dado previamente)

38. ¿Qué queda en c?

"--\#{a}--\n--\#{b}--\n" (Esta vez no se han sustituido los valores sino la cadena tal cual la hemos puesto)

39. s = "hello". ¿Cual es el valor de las siguientes expresiones?

s[0,2] = "he"
s[-1,1] = "o"
s[0,10] = "hello"

40. ¿Qué queda en g?

"hello world" (se ha añadido a lo que habíamos guardado en g ("hello") la cadena " world")

41. ¿Qué queda en e?

"..." 

42. ¿Cuál es el resultado?

"2 2 2"

43. ¿Qué es esto? %w[this is a test]

Da como resultado: ["this", "is", "a", "test"], %w separa en palabras la cadena que le hemos pasado y las guarda en un array  

44. ¿Qué es esto? %w[\t \n]

Da como resultado: ["\\t", "\\n"], vemos que actúa como comillas simples, la cadena se guarda tal cual la hemos escrito

45. ¿Qué es esto? %W[\t \n]

Da como resultado: ["\t", "\n"], %W actúa en este caso como comillas dobles y tiene en cuenta los tabuladores etc.

46. ¿Qué contiene nils? nils = Array.new(3)

[nil, nil, nil] (un array de tres nulos)

47. ¿Qué contiene zeros? zeros = Array.new(3, 0)

[0, 0, 0] (un array de tres ceros)

48. ¿Qué queda en b?

[[1, 2], [3, 4]] (ha copiado el contenido del array de x)

49. ¿Qué queda en c?

[0, 2, 4] 

50. ¿Cuál es el resultado de cada una de estas operaciones?

2.1.1 :001 > a = ('a'..'e').to_a
 => ["a", "b", "c", "d", "e"] 
2.1.1 :002 > a[1,1]
 => ["b"] 
2.1.1 :003 > a[-2,2]
 => ["d", "e"] 
2.1.1 :004 > a[0..2]
 => ["a", "b", "c"] 
2.1.1 :005 > a[0...1]
 => ["a"] 
2.1.1 :006 > a[-2..-1]
 => ["d", "e"] 
2.1.1 :007 > 

51. ¿Cuál es el resultado de cada una de estas operaciones?

2.1.1 :007 > a
 => ["a", "b", "c", "d", "e"] 
2.1.1 :008 > a[0,2] = %w{A B}
 => ["A", "B"] 
2.1.1 :009 > a
 => ["A", "B", "c", "d", "e"] 
2.1.1 :010 > a[2..5] = %w{C D E}
 => ["C", "D", "E"] 
2.1.1 :011 > a
 => ["A", "B", "C", "D", "E"] 
2.1.1 :012 > a[0,0] = [1,2,3]
 => [1, 2, 3] 
2.1.1 :013 > a
 => [1, 2, 3, "A", "B", "C", "D", "E"] 
2.1.1 :014 > a[0,2] =[]
 => [] 
2.1.1 :015 > a
 => [3, "A", "B", "C", "D", "E"] 
2.1.1 :016 > a[-1,1] = [ 'Z' ]                                                           
 => ["Z"] 
2.1.1 :017 > a
 => [3, "A", "B", "C", "D", "Z"] 
2.1.1 :018 > a[-2,2] = nil
 => nil 
2.1.1 :019 > a
 => [3, "A", "B", "C", nil] 
2.1.1 :020 > 

52. ¿Cuál es el resultado de cada una de estas operaciones?

2.1.1 :001 > a = (1...4).to_a
 => [1, 2, 3] 
2.1.1 :002 > a = a + [4,5]
 => [1, 2, 3, 4, 5] 
2.1.1 :003 > a += [[6,7,8]]
 => [1, 2, 3, 4, 5, [6, 7, 8]] 
2.1.1 :004 > a = a + 9
TypeError: no implicit conversion of Fixnum into Array
        from (irb):4:in `+'
        from (irb):4
        from /usr/local/rvm/rubies/ruby-2.1.1/bin/irb:11:in `<main>'
2.1.1 :005 >

53. ¿Cuál es el resultado de cada una de estas operaciones?

2.1.1 :001 > x = %w{a b c b a}
 => ["a", "b", "c", "b", "a"] 
2.1.1 :002 > x = x - %w{b c d}
 => ["a", "a"] 
2.1.1 :003 > 